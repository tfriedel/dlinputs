#!/usr/bin/python
#
# Copyright (c) 2017 NVIDIA CORPORATION. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import os.path
import sys
import tarfile
import argparse
import re
import glob
import json
import datetime
from pathlib import Path

parser = argparse.ArgumentParser("""\
Create a simple shard index in JSON format.
""")
parser.add_argument("prefix",
                    default=".",
                    nargs="?",
                    help="prefix for shards")
parser.add_argument("-d", "--description", default=None,
                    help="prefix for shards")
parser.add_argument("-o", "--output", default=None,
                    help="output file, '-' for stdout")
parser.add_argument("-x", "--extension", default="tgz",
                    help="extension for sharding")
args = parser.parse_args()
assert args.extension in ('tgz', 'tar')

def write_descriptor(desc, prefix):
    descriptor = dict(shardtype="application/x-{}".format(args.extension))
    pattern = prefix+"-[0-9]*[0-9]."+args.extension
    fnames = sorted([os.path.split(x)[1] for x in glob.glob(pattern)])
    descriptor["shards"] = [[x] for x in fnames]
    metadata = {}
    metadata["shardtime"] = str(datetime.datetime.now().replace(microsecond=0))
    if args.description is not None:
        metadata["description"] = args.description
    descriptor["metadata"] = metadata
    print("writing", desc)
    with open(desc, "w") as stream:
        json.dump(descriptor, stream, sort_keys=True, indent=4*" ")

if os.path.isdir(args.prefix):
    assert args.output is None
    suffix = args.extension
    files = glob.glob(args.prefix+"/*.{}".format(suffix))
    files = [f for f in files if re.search(r".*-[0-9]+.{}$".format(suffix), f)]
    prefixes = sorted(list(set(re.sub(r"-[0-9]+.{}$".format(suffix), "", f) for f in files)))
    for prefix in prefixes:
        desc = prefix+".shards"
        write_descriptor(desc, prefix)
else:
    if args.output is None:
        desc = args.prefix+".shards"
    elif args.output == "-":
        desc = sys.stdout
    write_descriptor(desc, args.prefix)
